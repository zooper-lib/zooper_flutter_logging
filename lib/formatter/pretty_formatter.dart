import 'package:zooper_flutter_logging/formatter/log_formatter.dart';
import 'package:zooper_flutter_logging/logger/log_level.dart';
import 'package:zooper_flutter_core/zooper_flutter_core.dart';

/// This is an example class of how to implement a log-formatter.
class PrettyFormatter extends LogFormatter {
  static const _topLeftCorner = '‚îå';
  static const _bottomLeftCorner = '‚îî';
  static const _middleCorner = '‚îú';
  static const _verticalLine = '‚îÇ';
  static const _doubleDivider = '‚îÄ';

  static const _newLine = '\n';

  static final _levelEmojis = {
    LogLevel.verbose: '',
    LogLevel.debug: 'üêõ',
    LogLevel.info: 'üí°',
    LogLevel.warning: '‚ö†Ô∏è',
    LogLevel.error: '‚õî',
    LogLevel.wtf: 'üëæ',
  };

  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex =
      RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex =
      RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex =
      RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

  /// The index which to begin the stack trace at
  ///
  /// This can be useful if, for instance, Logger is wrapped in another class and
  /// you wish to remove these wrapped calls from stack trace
  final int stackTraceBeginIndex;
  final int errorMethodCount;
  final int lineLength;
  final bool printEmojis;

  late String _topBorder;
  late String _middleBorder;
  late String _bottomBorder;

  PrettyFormatter({
    this.stackTraceBeginIndex = 0,
    this.errorMethodCount = 8,
    this.lineLength = 120,
    this.printEmojis = true,
  }) {
    var doubleDividerLine = StringBuffer();
    for (var i = 0; i < lineLength - 1; i++) {
      doubleDividerLine.write(_doubleDivider);
    }

    _topBorder = '$_topLeftCorner$doubleDividerLine';
    _middleBorder = '$_middleCorner$doubleDividerLine';
    _bottomBorder = '$_bottomLeftCorner$doubleDividerLine';
  }

  @override
  String format(String message, StackTrace? stackTrace, LogLevel level) {
    String stackTraceStr = stackTrace == null
        ? _formatStackTrace(StackTrace.current)
        : _formatStackTrace(stackTrace);

    return _format(
      level,
      message,
      DateTime.now().toIso8601(),
      stackTraceStr,
    );
  }

  String _formatStackTrace(StackTrace stackTrace) {
    var lines = stackTrace.toString().split(_newLine);
    if (stackTraceBeginIndex > 0 && stackTraceBeginIndex < lines.length - 1) {
      lines = lines.sublist(stackTraceBeginIndex);
    }
    var formatted = <String>[];
    var count = 0;
    for (var line in lines) {
      if (_discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line) ||
          line.isEmpty) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
    }

    if (formatted.isEmpty) {
      return '';
    } else {
      return formatted.join(_newLine);
    }
  }

  bool _discardDeviceStacktraceLine(String line) {
    var match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(2)!.startsWith('package:zooper_flutter_logging');
  }

  bool _discardWebStacktraceLine(String line) {
    var match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('packages/zooper_flutter_logging') ||
        match.group(1)!.startsWith('dart-sdk/lib');
  }

  bool _discardBrowserStacktraceLine(String line) {
    var match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('package:zooper_flutter_logging') ||
        match.group(1)!.startsWith('dart:');
  }

  String _format(
    LogLevel level,
    String message,
    String? time,
    String? stacktrace,
  ) {
    List<String> lineBuffer = [];

    lineBuffer.add(_topBorder);

    // The time
    if (time != null) {
      lineBuffer.add('$_verticalLine $time');
      lineBuffer.add(_middleBorder);
    }

    // The message
    var emoji = _getEmoji(level);
    for (var line in message.split(_newLine)) {
      lineBuffer.add('$_verticalLine $emoji $line');
    }
    lineBuffer.add(_middleBorder);

    // The StackTrace
    if (stacktrace != null) {
      for (var line in stacktrace.split(_newLine)) {
        lineBuffer.add('$_verticalLine $line');
      }
    }
    lineBuffer.add(_bottomBorder);

    return lineBuffer.join(_newLine);
  }

  String _getEmoji(LogLevel level) {
    if (printEmojis) {
      return _levelEmojis[level]!;
    } else {
      return '';
    }
  }
}
